{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _react,{useContext,useLayoutEffect,useMemo,useState}from\"react\";var $f01a183cc7bdff77849e49ad26eb904$var$defaultContext={prefix:String(Math.round(Math.random()*10000000000)),current:0};var $f01a183cc7bdff77849e49ad26eb904$var$SSRContext=_react.createContext($f01a183cc7bdff77849e49ad26eb904$var$defaultContext);export function SSRProvider(props){var cur=useContext($f01a183cc7bdff77849e49ad26eb904$var$SSRContext);var value=useMemo(function(){return{prefix:cur===$f01a183cc7bdff77849e49ad26eb904$var$defaultContext?'':cur.prefix+\"-\"+ ++cur.current,current:0};},[cur]);return _react.createElement($f01a183cc7bdff77849e49ad26eb904$var$SSRContext.Provider,{value:value},props.children);}var $f01a183cc7bdff77849e49ad26eb904$var$canUseDOM=Boolean(typeof window!=='undefined'&&window.document&&window.document.createElement);export function useSSRSafeId(defaultId){var ctx=useContext($f01a183cc7bdff77849e49ad26eb904$var$SSRContext);if(ctx===$f01a183cc7bdff77849e49ad26eb904$var$defaultContext&&!$f01a183cc7bdff77849e49ad26eb904$var$canUseDOM){console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');}return useMemo(function(){return defaultId||\"react-aria\"+ctx.prefix+\"-\"+ ++ctx.current;},[defaultId]);}export function useIsSSR(){var cur=useContext($f01a183cc7bdff77849e49ad26eb904$var$SSRContext);var isInSSRContext=cur!==$f01a183cc7bdff77849e49ad26eb904$var$defaultContext;var _useState=useState(isInSSRContext),_useState2=_slicedToArray(_useState,2),isSSR=_useState2[0],setIsSSR=_useState2[1];if(typeof window!=='undefined'&&isInSSRContext){useLayoutEffect(function(){setIsSSR(false);},[]);}return isSSR;}","map":{"version":3,"sources":["packages/@react-aria/ssr/src/SSRProvider.tsx"],"names":["defaultContext","prefix","String","Math","current","SSRContext","React","cur","useContext","value","useMemo","props","canUseDOM","Boolean","window","ctx","console","defaultId","isInSSRContext","useState","useLayoutEffect","setIsSSR"],"mappings":"wIA8BA,GAAMA,CAAAA,mDAA+B,CAAG,CACtCC,MAAM,CAAEC,MAAM,CAACC,IAAI,CAAJA,KAAAA,CAAWA,IAAI,CAAJA,MAAAA,GADY,WACvBA,CAAD,CADwB,CAEtCC,OAAO,CAAE,CAF6B,CAAxC,CAKA,GAAMC,CAAAA,+CAAU,CAAGC,MAAK,CAALA,aAAAA,CAAnB,mDAAmBA,CAAnB,C,MAWO,SAAA,CAAA,WAAA,CAAA,KAAA,CAA2D,CAChE,GAAIC,CAAAA,GAAG,CAAGC,UAAU,CAApB,+CAAoB,CAApB,CACA,GAAIC,CAAAA,KAAsB,CAAGC,OAAO,CAAC,iBAAO,CAG1CT,MAAM,CAAEM,GAAG,GAAHA,mDAAAA,CAAAA,EAAAA,CAAiCA,GAAG,CAApCA,MAAiCA,CAAjCA,GAAiCA,CAAc,GAAEA,GAAG,CAHlB,OAAA,CAI1CH,OAAO,CAAE,CAJiC,CAAP,EAAD,CAKhC,CALJ,GAKI,CALgC,CAApC,CAOA,MACE,CAAA,MAAA,CAAA,aAAA,CAAC,+CAAD,CAAA,QAAA,CAAA,CAAqB,KAAK,CAAEK,KAA5B,CAAA,CACGE,KAAK,CAFV,QACE,CADF,CAKD,CAED,GAAIC,CAAAA,8CAAS,CAAGC,OAAO,CACrB,MAAA,CAAA,MAAA,GAAA,WAAA,EACAC,MAAM,CADN,QAAA,EAEAA,MAAM,CAANA,QAAAA,CAHF,aAAuB,CAAvB,C,MAOO,SAAA,CAAA,YAAA,CAAA,SAAA,CAAkD,CACvD,GAAIC,CAAAA,GAAG,CAAGP,UAAU,CADmC,+CACnC,CAApB,CAIA,GAAIO,GAAG,GAAHA,mDAAAA,EAA0B,CAA9B,8CAAA,CAA0C,CACxCC,OAAO,CAAPA,IAAAA,CAAAA,iJAAAA,EACD,CAED,MAAON,CAAAA,OAAO,CAAC,iBAAMO,CAAAA,SAAS,EAAA,aAAiBF,GAAG,CAApB,MAAA,CAAA,GAAA,CAA+B,GAAEA,GAAG,CAApD,OAAC,EAAD,CAAgE,CAA9E,SAA8E,CAAhE,CAAd,CACD,C,MAOM,SAAA,CAAA,QAAA,EAA6B,CAClC,GAAIR,CAAAA,GAAG,CAAGC,UAAU,CAApB,+CAAoB,CAApB,CACA,GAAIU,CAAAA,cAAc,CAAGX,GAAG,GAAxB,mDAAA,CACA,cAAwBY,QAAQ,CAHE,cAGF,CAAhC,wCAAI,KAAJ,eAAI,QAAJ,eAIA,GAAI,MAAA,CAAA,MAAA,GAAA,WAAA,EAAJ,cAAA,CAAqD,CAInDC,eAAe,CAAC,UAAM,CACpBC,QAAQ,CAARA,KAAQ,CAARA,CADa,CAAA,CAAfD,EAAe,CAAfA,CAGD,CAED,MAAA,CAAA,KAAA,CACD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {ReactNode, useContext, useLayoutEffect, useMemo, useState} from 'react';\n\n// To support SSR, the auto incrementing id counter is stored in a context. This allows\n// it to be reset on every request to ensure the client and server are consistent.\n// There is also a prefix string that is used to support async loading components\n// Each async boundary must be wrapped in an SSR provider, which appends to the prefix\n// and resets the current id counter. This ensures that async loaded components have\n// consistent ids regardless of the loading order.\ninterface SSRContextValue {\n  prefix: string,\n  current: number\n}\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst defaultContext: SSRContextValue = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0\n};\n\nconst SSRContext = React.createContext<SSRContextValue>(defaultContext);\n\ninterface SSRProviderProps {\n  /** Your application here. */\n  children: ReactNode\n}\n\n/**\n * When using SSR with React Aria, applications must be wrapped in an SSRProvider.\n * This ensures that auto generated ids are consistent between the client and server.\n */\nexport function SSRProvider(props: SSRProviderProps): JSX.Element {\n  let cur = useContext(SSRContext);\n  let value: SSRContextValue = useMemo(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === defaultContext ? '' : `${cur.prefix}-${++cur.current}`,\n    current: 0\n  }), [cur]);\n\n  return (\n    <SSRContext.Provider value={value}>\n      {props.children}\n    </SSRContext.Provider>\n  );\n}\n\nlet canUseDOM = Boolean(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\n/** @private */\nexport function useSSRSafeId(defaultId?: string): string {\n  let ctx = useContext(SSRContext);\n\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n  if (ctx === defaultContext && !canUseDOM) {\n    console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n  }\n\n  return useMemo(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);\n}\n\n/**\n * Returns whether the component is currently being server side rendered or\n * hydrated on the client. Can be used to delay browser-specific rendering\n * until after hydration.\n */\nexport function useIsSSR(): boolean {\n  let cur = useContext(SSRContext);\n  let isInSSRContext = cur !== defaultContext;\n  let [isSSR, setIsSSR] = useState(isInSSRContext);\n\n  // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n  if (typeof window !== 'undefined' && isInSSRContext) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n\n  return isSSR;\n}\n"]},"metadata":{},"sourceType":"module"}