{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _react=_interopRequireWildcard(require(\"react\"));var _Box=_interopRequireDefault(require(\"../../primitives/Box\"));var _useThemeProps=require(\"../../../hooks/useThemeProps\");var _useFormControl=require(\"./useFormControl\");var _useHasResponsiveProps=require(\"../../../hooks/useHasResponsiveProps\");var _utils=require(\"../../../utils\");var _this=this,_jsxFileName=\"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/FormControl/FormControlHelperText.tsx\";var FormControlHelperText=function FormControlHelperText(props,ref){var formControlContext=(0,_useFormControl.useFormControlContext)();var combinedProps=(0,_utils.combineContextAndProps)(formControlContext,props);var resolvedProps=(0,_useThemeProps.usePropsResolution)('FormControlHelperText',combinedProps,{isDisabled:combinedProps.isDisabled,isReadOnly:combinedProps.isReadOnly,isInvalid:combinedProps.isInvalid});_react.default.useEffect(function(){resolvedProps==null?void 0:resolvedProps.setHasHelpText(true);return function(){resolvedProps==null?void 0:resolvedProps.setHasHelpText(false);};});if((0,_useHasResponsiveProps.useHasResponsiveProps)(props)){return null;}return _react.default.createElement(_Box.default,(0,_extends2.default)({},resolvedProps,{nativeID:resolvedProps==null?void 0:resolvedProps.feedbackId,ref:ref,__self:_this,__source:{fileName:_jsxFileName,lineNumber:38,columnNumber:5}}));};var _default=(0,_react.memo)((0,_react.forwardRef)(FormControlHelperText));exports.default=_default;","map":{"version":3,"sources":["FormControlHelperText.tsx"],"names":["FormControlHelperText","formControlContext","combinedProps","resolvedProps","isDisabled","isReadOnly","isInvalid","React"],"mappings":"wUAAA,GAAA,CAAA,MAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CACA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,wBAAA,CAAA,CACA,GAAA,CAAA,cAAA,CAAA,OAAA,gCAAA,CACA,GAAA,CAAA,eAAA,CAAA,OAAA,oBAAA,CAEA,GAAA,CAAA,sBAAA,CAAA,OAAA,wCAAA,CACA,GAAA,CAAA,MAAA,CAAA,OAAA,kBAAA,C,uJAEA,GAAMA,CAAAA,qBAAqB,CAArBA,QAAAA,CAAAA,qBAAAA,CAAwB,KAAxBA,CAAwB,GAAxBA,CAGD,CACH,GAAMC,CAAAA,kBAAkB,CAAG,CAAA,EAAA,eAAA,CAA3B,qBAA2B,GAA3B,CACA,GAAMC,CAAAA,aAAa,CAAG,CAAA,EAAA,MAAA,CAAA,sBAAA,EAAA,kBAAA,CAAtB,KAAsB,CAAtB,CACA,GAAMC,CAAAA,aAAa,CAAG,CAAA,EAAA,cAAA,CAAA,kBAAA,EAAA,uBAAA,CAAA,aAAA,CAGpB,CACEC,UAAU,CAAEF,aAAa,CAD3B,UAAA,CAEEG,UAAU,CAAEH,aAAa,CAF3B,UAAA,CAGEI,SAAS,CAAEJ,aAAa,CAN5B,SAGE,CAHoB,CAAtB,CAWAK,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAgB,UAAM,CACpBJ,aAAa,EAAbA,IAAAA,CAAAA,IAAAA,EAAAA,CAAAA,aAAa,CAAbA,cAAAA,CAAAA,IAAAA,CAAAA,CACA,MAAO,WAAM,CACXA,aAAa,EAAbA,IAAAA,CAAAA,IAAAA,EAAAA,CAAAA,aAAa,CAAbA,cAAAA,CAAAA,KAAAA,CAAAA,CADF,CAAA,CAFFI,CAAAA,EAOA,GAAI,CAAA,EAAA,sBAAA,CAAA,qBAAA,EAAJ,KAAI,CAAJ,CAAkC,CAChC,MAAA,KAAA,CAGF,OACE,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,IAAA,CAAD,OAAA,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,EAAA,CAAA,aAAA,CAAA,CAAwB,QAAQ,CAAEJ,aAAF,EAAA,IAAEA,CAAF,IAAA,EAAEA,CAAAA,aAAa,CAA/C,UAAA,CAA6D,GAAG,CAAhE,GAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CADF,CACE,CAAA,CAAA,CAAA,CADF,CA5BF,CAAA,C,aAiCe,CAAA,EAAA,MAAA,CAAA,IAAA,EAAK,CAAA,EAAA,MAAA,CAAA,UAAA,EAAL,qBAAK,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFormControlContext } from './useFormControl';\nimport type { IFormControlHelperTextProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlHelperText = (\n  props: IFormControlHelperTextProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const resolvedProps = usePropsResolution(\n    'FormControlHelperText',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  React.useEffect(() => {\n    resolvedProps?.setHasHelpText(true);\n    return () => {\n      resolvedProps?.setHasHelpText(false);\n    };\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box {...resolvedProps} nativeID={resolvedProps?.feedbackId} ref={ref} />\n  );\n};\n\nexport default memo(forwardRef(FormControlHelperText));\n"]},"metadata":{},"sourceType":"script"}