{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.NativeBaseProvider=void 0;var _react=_interopRequireDefault(require(\"react\"));var _native=require(\"styled-components/native\");var _reactNativeSafeAreaContext=require(\"react-native-safe-area-context\");var _utils=require(\"@react-native-aria/utils\");var _theme=require(\"./../theme\");var _HybridProvider=_interopRequireDefault(require(\"./hybrid-overlay/HybridProvider\"));var _overlays=require(\"@react-native-aria/overlays\");var _Toast=require(\"../components/composites/Toast\");var _NativeBaseContext=require(\"./NativeBaseContext\");var _reactNative=require(\"react-native-web/dist/index\");var _utils2=require(\"../theme/tools/utils\");var _this=this,_jsxFileName=\"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/core/NativeBaseProvider.tsx\";var defaultInitialWindowMetricsBasedOnPlatform=_reactNative.Platform.select({web:{frame:{x:0,y:0,width:0,height:0},insets:{top:0,left:0,right:0,bottom:0}},default:_reactNativeSafeAreaContext.initialWindowMetrics});var NativeBaseProvider=function NativeBaseProvider(props){var _config$theme,_useWindowDimensions;var colorModeManager=props.colorModeManager,_props$config=props.config,config=_props$config===void 0?_NativeBaseContext.defaultConfig:_props$config,children=props.children,_props$theme=props.theme,propsTheme=_props$theme===void 0?_theme.theme:_props$theme,initialWindowMetrics=props.initialWindowMetrics,isSSR=props.isSSR;var theme=(_config$theme=config.theme)!=null?_config$theme:propsTheme;var newTheme=_react.default.useMemo(function(){if(config.enableRem){return(0,_utils2.platformSpecificSpaceUnits)(theme);}return theme;},[config.enableRem,theme]);var windowWidth=(_useWindowDimensions=(0,_reactNative.useWindowDimensions)())==null?void 0:_useWindowDimensions.width;var currentBreakpoint=_react.default.useMemo(function(){return(0,_utils2.getClosestBreakpoint)(newTheme.breakpoints,windowWidth);},[windowWidth,newTheme.breakpoints]);return _react.default.createElement(_native.ThemeProvider,{theme:newTheme,__self:_this,__source:{fileName:_jsxFileName,lineNumber:75,columnNumber:5}},_react.default.createElement(_NativeBaseContext.NativeBaseConfigProvider,{config:config,currentBreakpoint:currentBreakpoint,isSSR:isSSR,__self:_this,__source:{fileName:_jsxFileName,lineNumber:76,columnNumber:7}},_react.default.createElement(_reactNativeSafeAreaContext.SafeAreaProvider,{initialMetrics:initialWindowMetrics!=null?initialWindowMetrics:defaultInitialWindowMetricsBasedOnPlatform,__self:_this,__source:{fileName:_jsxFileName,lineNumber:81,columnNumber:9}},_react.default.createElement(_HybridProvider.default,{colorModeManager:colorModeManager,options:theme.config,__self:_this,__source:{fileName:_jsxFileName,lineNumber:86,columnNumber:11}},_react.default.createElement(_overlays.OverlayProvider,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:90,columnNumber:13}},_react.default.createElement(_Toast.ToastProvider,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:91,columnNumber:15}},_react.default.createElement(InitializeToastRef,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:92,columnNumber:17}}),_react.default.createElement(_utils.SSRProvider,{__self:_this,__source:{fileName:_jsxFileName,lineNumber:93,columnNumber:17}},children)))))));};exports.NativeBaseProvider=NativeBaseProvider;var InitializeToastRef=function InitializeToastRef(){var toast=(0,_Toast.useToast)();_Toast.ToastRef.current=toast;return null;};","map":{"version":3,"sources":["NativeBaseProvider.tsx"],"names":["defaultInitialWindowMetricsBasedOnPlatform","Platform","web","frame","x","y","width","height","insets","top","left","right","bottom","default","defaultInitialWindowMetrics","NativeBaseProvider","colorModeManager","config","defaultConfig","children","propsTheme","defaultTheme","initialWindowMetrics","isSSR","props","theme","newTheme","React","windowWidth","currentBreakpoint","InitializeToastRef","toast","ToastRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ThemeProvider } from 'styled-components/native';\nimport {\n  SafeAreaProvider,\n  Metrics,\n  initialWindowMetrics as defaultInitialWindowMetrics,\n} from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme, ITheme } from './../theme';\nimport type { IColorModeProviderProps } from './color-mode';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport {\n  defaultConfig,\n  INativebaseConfig,\n  NativeBaseConfigProvider,\n} from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport { Platform, useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  platformSpecificSpaceUnits,\n} from '../theme/tools/utils';\n\n// For SSR to work, we need to pass initial insets as 0 values on web.\n\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\nconst defaultInitialWindowMetricsBasedOnPlatform: Metrics | null = Platform.select(\n  {\n    web: {\n      frame: { x: 0, y: 0, width: 0, height: 0 },\n      insets: { top: 0, left: 0, right: 0, bottom: 0 },\n    },\n    default: defaultInitialWindowMetrics,\n  }\n);\n\nexport interface NativeBaseProviderProps {\n  theme?: ITheme;\n  colorModeManager?: IColorModeProviderProps['colorModeManager'];\n  children?: React.ReactNode;\n  initialWindowMetrics?: any;\n  config?: INativebaseConfig;\n  isSSR?: boolean;\n  // Refer https://github.com/th3rdwave/react-native-safe-area-context#testing\n}\n\nconst NativeBaseProvider = (props: NativeBaseProviderProps) => {\n  const {\n    colorModeManager,\n    config = defaultConfig,\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n    isSSR,\n  } = props;\n  const theme = config.theme ?? propsTheme;\n\n  const newTheme = React.useMemo(() => {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n    return theme;\n  }, [config.enableRem, theme]);\n\n  const windowWidth = useWindowDimensions()?.width;\n\n  const currentBreakpoint = React.useMemo(\n    () => getClosestBreakpoint(newTheme.breakpoints, windowWidth),\n    [windowWidth, newTheme.breakpoints]\n  );\n\n  return (\n    <ThemeProvider theme={newTheme}>\n      <NativeBaseConfigProvider\n        config={config}\n        currentBreakpoint={currentBreakpoint}\n        isSSR={isSSR}\n      >\n        <SafeAreaProvider\n          initialMetrics={\n            initialWindowMetrics ?? defaultInitialWindowMetricsBasedOnPlatform\n          }\n        >\n          <HybridProvider\n            colorModeManager={colorModeManager}\n            options={theme.config}\n          >\n            <OverlayProvider>\n              <ToastProvider>\n                <InitializeToastRef />\n                <SSRProvider>{children}</SSRProvider>\n              </ToastProvider>\n            </OverlayProvider>\n          </HybridProvider>\n        </SafeAreaProvider>\n      </NativeBaseConfigProvider>\n    </ThemeProvider>\n  );\n};\n\nconst InitializeToastRef = () => {\n  const toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };\n"]},"metadata":{},"sourceType":"script"}