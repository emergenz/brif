{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _react=_interopRequireWildcard(require(\"react\"));var _useThemeProps=require(\"../../../hooks/useThemeProps\");var _Box=_interopRequireDefault(require(\"../../primitives/Box\"));var _useFormControl=require(\"./useFormControl\");var _useHasResponsiveProps=require(\"../../../hooks/useHasResponsiveProps\");var _this=this,_jsxFileName=\"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/FormControl/FormControl.tsx\";var FormControl=function FormControl(props,ref){var _useFormControlProvid=(0,_useFormControl.useFormControlProvider)(props),htmlProps=_useFormControlProvid.htmlProps,context=(0,_objectWithoutProperties2.default)(_useFormControlProvid,[\"htmlProps\"]);var resolvedProps=(0,_useThemeProps.usePropsResolution)('FormControl',props,{isDisabled:context.isDisabled,isReadOnly:context.isReadOnly,isInvalid:context.isInvalid});if((0,_useHasResponsiveProps.useHasResponsiveProps)(props)){return null;}return _react.default.createElement(_useFormControl.FormControlContext.Provider,{value:context,__self:_this,__source:{fileName:_jsxFileName,lineNumber:21,columnNumber:5}},_react.default.createElement(_Box.default,(0,_extends2.default)({width:\"100%\"},resolvedProps,htmlProps,{ref:ref,__self:_this,__source:{fileName:_jsxFileName,lineNumber:22,columnNumber:7}})));};var _default=(0,_react.memo)((0,_react.forwardRef)(FormControl));exports.default=_default;","map":{"version":3,"sources":["FormControl.tsx"],"names":["FormControl","htmlProps","context","resolvedProps","isDisabled","isReadOnly","isInvalid"],"mappings":"wbAAA,GAAA,CAAA,MAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CACA,GAAA,CAAA,cAAA,CAAA,OAAA,gCAAA,CACA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,OAAA,wBAAA,CAAA,CAEA,GAAA,CAAA,eAAA,CAAA,OAAA,oBAAA,CACA,GAAA,CAAA,sBAAA,CAAA,OAAA,wCAAA,C,6IAEA,GAAMA,CAAAA,WAAW,CAAXA,QAAAA,CAAAA,WAAAA,CAAc,KAAdA,CAAc,GAAdA,CAAsD,CAAA,GAAA,CAAA,qBAAA,CACxB,CAAA,EAAA,eAAA,CAAA,sBAAA,EADwB,KACxB,CADwB,CAClDC,SADkD,CAAA,qBAAA,CAAA,SAAA,CACpCC,OADoC,CAAA,CAAA,EAAA,yBAAA,CAAA,OAAA,EAAA,qBAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAE1D,GAAMC,CAAAA,aAAa,CAAG,CAAA,EAAA,cAAA,CAAA,kBAAA,EAAA,aAAA,CAAA,KAAA,CAAyC,CAC7DC,UAAU,CAAEF,OAAO,CAD0C,UAAA,CAE7DG,UAAU,CAAEH,OAAO,CAF0C,UAAA,CAG7DI,SAAS,CAAEJ,OAAO,CAHpB,SAA+D,CAAzC,CAAtB,CAOA,GAAI,CAAA,EAAA,sBAAA,CAAA,qBAAA,EAAJ,KAAI,CAAJ,CAAkC,CAChC,MAAA,KAAA,CAEF,OACE,CAAA,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,eAAA,CAAD,kBAAC,CAAD,QAAA,CAAA,CAA6B,KAAK,CAAlC,OAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,IAAA,CAAD,OAAA,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAA,CAAK,KAAK,CAAV,MAAA,CAAA,CAAA,aAAA,CAAA,SAAA,CAAA,CAAoD,GAAG,CAAvD,GAAA,CAAA,MAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAFJ,CAEI,CAAA,CAAA,CAAA,CADF,CADF,CAZF,CAAA,C,aAmBe,CAAA,EAAA,MAAA,CAAA,IAAA,EAAK,CAAA,EAAA,MAAA,CAAA,UAAA,EAAL,WAAK,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from '../../primitives/Box';\nimport type { IFormControlProps } from './types';\nimport { useFormControlProvider, FormControlContext } from './useFormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst FormControl = (props: IFormControlProps, ref: any) => {\n  const { htmlProps, ...context } = useFormControlProvider(props);\n  const resolvedProps = usePropsResolution('FormControl', props, {\n    isDisabled: context.isDisabled,\n    isReadOnly: context.isReadOnly,\n    isInvalid: context.isInvalid,\n    // isRequired: context.isRequired,\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <FormControlContext.Provider value={context}>\n      <Box width=\"100%\" {...resolvedProps} {...htmlProps} ref={ref} />\n    </FormControlContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(FormControl));\n"]},"metadata":{},"sourceType":"script"}