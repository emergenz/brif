{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _react=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native-web/dist/index\");var _hooks=require(\"../../../hooks\");var _utils=require(\"../../../utils\");var _Box=_interopRequireDefault(require(\"../../primitives/Box\"));var _useHasResponsiveProps=require(\"../../../hooks/useHasResponsiveProps\");var _useToken=require(\"../../../hooks/useToken\");var _this=this,_jsxFileName=\"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/Skeleton/Skeleton.tsx\";var Skeleton=function Skeleton(props,ref){var isDomUsable=(0,_utils.canUseDom)();var _usePropsResolution=(0,_hooks.usePropsResolution)('Skeleton',props),children=_usePropsResolution.children,startColor=_usePropsResolution.startColor,style=_usePropsResolution.style,endColor=_usePropsResolution.endColor,resolvedProps=(0,_objectWithoutProperties2.default)(_usePropsResolution,[\"children\",\"startColor\",\"style\",\"endColor\"]);var blinkAnim=_react.default.useRef(new _reactNative.Animated.Value(0)).current;var tokenisedRadius=(0,_useToken.useToken)('radii',resolvedProps.borderRadius);var tokenisedStartColor=(0,_useToken.useToken)('colors',startColor);_react.default.useEffect(function(){if(isDomUsable){var blink=_reactNative.Animated.sequence([_reactNative.Animated.timing(blinkAnim,{toValue:1,duration:resolvedProps.fadeDuration*10000*(1/resolvedProps.speed),useNativeDriver:_reactNative.Platform.OS!=='web'}),_reactNative.Animated.timing(blinkAnim,{toValue:0,duration:resolvedProps.fadeDuration*10000*(1/resolvedProps.speed),useNativeDriver:_reactNative.Platform.OS!=='web'})]);_reactNative.Animated.loop(blink).start();}},[blinkAnim,isDomUsable,resolvedProps]);var skeletonStyle={skeleton:{position:'absolute',top:0,bottom:0,height:'100%',width:'100%',borderRadius:tokenisedRadius,backgroundColor:tokenisedStartColor,opacity:blinkAnim}};if((0,_useHasResponsiveProps.useHasResponsiveProps)(props)){return null;}return resolvedProps.isLoaded?children:_react.default.createElement(_Box.default,(0,_extends2.default)({style:[style],borderRadius:tokenisedRadius,bg:endColor},resolvedProps,{ref:ref,__self:_this,__source:{fileName:_jsxFileName,lineNumber:65,columnNumber:5}}),_react.default.createElement(_reactNative.Animated.View,{style:skeletonStyle.skeleton,__self:_this,__source:{fileName:_jsxFileName,lineNumber:72,columnNumber:7}}),children?_react.default.createElement(_reactNative.View,{style:{opacity:0},__self:_this,__source:{fileName:_jsxFileName,lineNumber:74,columnNumber:19}},children):null);};var _default=(0,_react.memo)((0,_react.forwardRef)(Skeleton));exports.default=_default;","map":{"version":3,"sources":["Skeleton.tsx"],"names":["Skeleton","isDomUsable","children","startColor","style","endColor","resolvedProps","blinkAnim","React","Animated","tokenisedRadius","tokenisedStartColor","blink","toValue","duration","useNativeDriver","Platform","skeletonStyle","skeleton","position","top","bottom","height","width","borderRadius","backgroundColor","opacity"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Animated, Platform, View } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport Box from '../../primitives/Box';\nimport type { ISkeletonProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useToken } from '../../../hooks/useToken';\n\nconst Skeleton = (props: ISkeletonProps, ref: any) => {\n  const isDomUsable = canUseDom();\n  const {\n    children,\n    startColor,\n    style,\n    endColor,\n    ...resolvedProps\n  } = usePropsResolution('Skeleton', props);\n  // Setting blink Animation\n  const blinkAnim = React.useRef(new Animated.Value(0)).current;\n  const tokenisedRadius = useToken('radii', resolvedProps.borderRadius);\n  const tokenisedStartColor = useToken('colors', startColor);\n\n  // Generating blink animation in a sequence\n  React.useEffect(() => {\n    //Check if window is loaded\n    if (isDomUsable) {\n      const blink = Animated.sequence([\n        Animated.timing(blinkAnim, {\n          toValue: 1,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n        Animated.timing(blinkAnim, {\n          toValue: 0,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n      ]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable, resolvedProps]);\n\n  const skeletonStyle: any = {\n    skeleton: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      height: '100%',\n      width: '100%',\n      borderRadius: tokenisedRadius,\n      backgroundColor: tokenisedStartColor,\n      opacity: blinkAnim, // Bind opacity to animated value\n    },\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return resolvedProps.isLoaded ? (\n    children\n  ) : (\n    <Box\n      style={[style]}\n      borderRadius={tokenisedRadius}\n      bg={endColor}\n      {...resolvedProps}\n      ref={ref}\n    >\n      <Animated.View style={skeletonStyle.skeleton} />\n      {/* Rendering children with 0 opacity (takes height of children incase children are present) */}\n      {children ? <View style={{ opacity: 0 }}>{children}</View> : null}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Skeleton));\n"]},"metadata":{},"sourceType":"script"}